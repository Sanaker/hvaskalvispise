package com.sanaker.hvaskalvispise.ui.viewmodel

import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope // Import viewModelScope for coroutines
import com.sanaker.hvaskalvispise.data.model.Dish
import com.sanaker.hvaskalvispise.data.model.DishDao // Import DishDao for Room operations
import kotlinx.coroutines.Dispatchers // For specifying coroutine dispatcher (e.g., IO thread)
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.collectLatest // To collect flow data
import kotlinx.coroutines.launch // To launch coroutines
import kotlin.random.Random

// ViewModel now takes DishDao instead of DishRepository
class MainViewModel(private val dishDao: DishDao) : ViewModel() {

    // LiveData for the list of dishes from Room.
    // We will collect Flow from DAO and post to LiveData.
    private val _dishes = MutableLiveData<List<Dish>>() // Changed to List<Dish> from MutableList<Dish>
    val dishes: LiveData<List<Dish>> = _dishes // Changed to List<Dish>

    // LiveData for the randomly selected dish.
    private val _selectedDish = MutableLiveData<Dish?>()
    val selectedDish: LiveData<Dish?> = _selectedDish

    init {
        // Collect dishes from the database when ViewModel is initialized
        // Use viewModelScope to launch coroutines that are cancelled when the ViewModel is cleared
        viewModelScope.launch {
            dishDao.getAllDishes().collectLatest { dishesFromDb ->
                _dishes.value = dishesFromDb // Update LiveData with new list
            }
        }
    }

    // Add a new dish to the database
    fun addDish(dishName: String) {
        if (dishName.isNotBlank()) {
            val newDish = Dish(name = dishName) // ID will be auto-generated by Room (id=0 upon insertion)
            viewModelScope.launch(Dispatchers.IO) { // Perform DB operation on IO dispatcher
                dishDao.insert(newDish)
            }
        }
    }

    // Delete a dish from the database
    fun deleteDish(dish: Dish) {
        viewModelScope.launch(Dispatchers.IO) { // Perform DB operation on IO dispatcher
            dishDao.delete(dish)
        }
    }

    // Choose a random dish from the current list
    fun chooseRandomDish() {
        val currentDishes = _dishes.value
        if (!currentDishes.isNullOrEmpty()) {
            val randomIndex = Random.nextInt(currentDishes.size)
            _selectedDish.value = currentDishes[randomIndex]
        } else {
            _selectedDish.value = null // No dishes to choose from
        }
    }
}